package com.spongecell.ad {  import flash.display.*;  import flash.events.*;    import flash.utils.*;  import flash.net.*;  import flash.system.Security;  import flash.external.ExternalInterface;  import flash.geom.Rectangle;    import com.spongecell.ad.AdEvent;  import com.spongecell.ad.InStreamAdEvent;    import com.spongecell.actions.ActionEvent;  import com.spongecell.actions.ActionEventType;  import com.spongecell.net.Net;  import com.spongecell.net.GUID;  import com.spongecell.net.URLUtility;   import com.spongecell.net.SWFLoader;  import com.spongecell.components.instream.IVPAID;  import com.spongecell.components.instream.VPAIDEvent;  import com.spongecell.components.instream.VASTStub;  import com.spongecell.components.video.VideoPlayerEvent;  import com.spongecell.loader.LoadingStrategy;  import com.spongecell.debug.Console;  import com.spongecell.creative.CreativeEvent;  import com.spongecell.dynamic.utilities.SignalLoader;  import com.spongecell.dynamic.SignalProcessorEvent;  import com.spongecell.flash.ParameterReader;  import com.spongecell.navigation.InStreamMenu;  import com.spongecell.utilities.InStreamDataExchange;    import com.adobe.serialization.json.JSON;    import com.namespace.greensock.TweenNano;  public class InStreamAd extends Ad implements IVPAID {    private var publishWidth:Number;    private var publishHeight:Number;    // Spongecell class attributes:    private static const VPAID_VERSION:String = "1.0";        private static const INSTREAM_AD_WIDTH:Number = 640;    private static const INSTREAM_AD_HEIGHT:Number = 360;    protected static const UNDERLAY_FADE_SPEED:Number = .25;    public var resize300x250:MovieClip;    public var resize400x280:MovieClip;    public var resize640x360:MovieClip;    public var resizeOriginal:MovieClip;    public var underlay:MovieClip;    private var _underlayAlpha:Number;    protected var resizeableObjects:Array = [];    protected var _inStreamVideo:*;    private var signalCount:int = 0;    private var signalLoadedCount:int = 0;    private var _vastPlayerHeight : Number;    private var _vastPlayerWidth : Number;    private function get currentOrDefaultWidth() : Number { return  _vastPlayerWidth || INSTREAM_AD_WIDTH; }    private function get currentOrDefaultHeight() : Number { return  _vastPlayerHeight || INSTREAM_AD_HEIGHT; }    private var _dynamicFlashParameters:Object = {};    // VPAID interface `get`, `set` methods        private var _adLinear : Boolean = true;    public function get adLinear() : Boolean { return _adLinear; }     private var _adExpanded : Boolean;    public function get adExpanded() : Boolean { return _adExpanded; }    private var _adTimeRemaining:Number = -2;    public function get adRemainingTime() : Number {      // Uncomment if need to debug countdown timers in publisher players:      // Console.log('VPAID#adRemainingTime: ' + _adTimeRemaining);      return _adTimeRemaining;     }    private var _initialAdTotalTime:Number;    private var _adVolume : Number = 1;    public function get adVolume() : Number { return _adVolume }    public function set adVolume(value : Number) : void {       if (_inStreamVideo) { _inStreamVideo.adVolume(value); }      _adVolume = adVolume;     }    // Methods            public function InStreamAd() {      Console.log("Spongecell#InStreamAd()")      Security.allowDomain("*");       Ad.IN_STREAM = true;      this.visible = false;      mouseEnabled = false;      if (parent is Stage) {         publishWidth = stage.stageWidth;        publishHeight = stage.stageHeight;      } else {        publishWidth = this.width;        publishHeight = this.height;      }      addEventListener(ActionEventType.OPEN_URL, handleSpongecellScreenClick);      addEventListener(ActionEventType.INTERACTION, handleSpongecellVideoReporting);      addEventListener(ActionEventType.COMPLETED, handleSpongecellVideoReporting);      addEventListener(ActionEventType.OPEN, handleSpongecellScreenOpen);       addEventListener(ActionEventType.CLOSE, handleSpongecellScreenClose);      addEventListener(AdEvent.PAUSE, pauseVideo);      addEventListener(AdEvent.PLAY, resumeVideo);      addEventListener(InStreamAdEvent.RESIZABLE_OBJECT, addResizeableObject);      addEventListener(InStreamAdEvent.VIDEO_LOADED, handleInStreamVideoLoaded);      addEventListener(InStreamAdEvent.EXTEND, handleInStreamExtend);      addEventListener(InStreamAdEvent.SKIP, handleInStreamSkip);      addEventListener(VideoPlayerEvent.TIME_REMAINING, handleAdRemainingTime);      addEventListener(VideoPlayerEvent.TIME_REMAINING, handleTimeRemaining);      parameters.iid = generateIIDForVPAID(parameters.anticache);      // staticsBaseUrl: http://cdn.statics.live.spongecell.com/test/v4/      SWFLoader.staticsBaseUrl = parameters.staticsBaseUrl;      var result = URLUtility.parseURL(SWFLoader.staticsBaseUrl, '');      // { adPath: 'test/', fileName: 'v4' }      Ad.AD_PATH = result.adPath + result.fileName;      Console.log('Spongecell#InStreamAd::Ad.AD_PATH: ' + Ad.AD_PATH);      _underlayAlpha = underlay.alpha;      underlay.visible = false;      if (!Net.isRemote()) {         addEventListener(Event.ADDED_TO_STAGE, loadVASTStub);         if (resize300x250) resize300x250.addEventListener(MouseEvent.CLICK, function(event:Event) { resizeAd(300, 250, ''); });        if (resize400x280) resize400x280.addEventListener(MouseEvent.CLICK, function(event:Event){ resizeAd(400, 280, ''); });        if (resize640x360) resize640x360.addEventListener(MouseEvent.CLICK, function(event:Event) { resizeAd(640, 360, ''); });        if (resize640x360) resizeOriginal.addEventListener(MouseEvent.CLICK, function(event:Event) { resizeAd(publishWidth, publishHeight, ''); });      } else {        if (resize300x250) resize300x250.visible = false;         if (resize400x280) resize400x280.visible = false;         if (resize640x360) resize640x360.visible = false;         if (resize640x360) resizeOriginal.visible = false;      }    }    protected function loadVASTStub(event:Event) {      new VASTStub(this, stage.stageWidth, stage.stageHeight)    }    protected function generateIIDForVPAID(string:String) : String {      return (string || '') + GUID.generate();    }    protected function addResizeableObject(event:Event):void {      Console.log('InStreamAd#addResizeableObject: event.target: ' + event.target);      resizeableObjects.push(event.target);      event.target.resize(currentOrDefaultWidth, currentOrDefaultHeight);    }    //Override handleInit and defer calling it until initAd() runs    override protected function getDynamicData():void {            ParameterReader.read(root.loaderInfo.parameters, this, null, function(name:String, value:Object) {        // TODO: Clean up with regular expression        if (name.indexOf('[') >= 0) {          // Get the screen name, its nested param name and value          var sKey:String = name.slice(0, name.indexOf('['));          var sName:String = name.slice(sKey.length + 1, name.indexOf(']'));          var sValue:String = value.toString();          if (!_dynamicFlashParameters.hasOwnProperty(sKey)) { _dynamicFlashParameters[sKey] = {}; }          _dynamicFlashParameters[sKey][sName] = sValue;        }      });            Console.log("InStreamAd - _dynamicFlashParameters[\"Dynamic\"]: " + JSON.encode(_dynamicFlashParameters["Dynamic"]));      if (_dynamicFlashParameters["Dynamic"]) {        var signals:Object = {};        if (!dynamicData) {          dynamicData = {signalProcessors:{}};        }        for (var signalNumber:String in _dynamicFlashParameters["Dynamic"]) {          signalCount++;          var paramString:String = String(_dynamicFlashParameters["Dynamic"][signalNumber]);          paramString = paramString.replace(/\u0027+/g, '"');          var JSONdata:Object = JSON.decode(paramString);          signals[signalNumber] = JSONdata;          var signalLoader:SignalLoader = new SignalLoader();          signalLoader.addEventListener(SignalProcessorEvent.SIGNAL_PROCESSOR_DATA_LOADED, setSignalLoaderData);          signalLoader.addEventListener(SignalProcessorEvent.SIGNAL_PROCESSOR_NO_DATA, handleSignalProcessorNoData);          signalLoader.load(signals[signalNumber].url, signals[signalNumber].defaultURL);        }      } else if (false) {        // http://cdn.statics.live.spongecell.com/davis/ui/instream/bar/v4t/bin/InStreamGrid.swf?trackingDisabled=false&amp;Creative[source]=http%3A%2F%2Fcdn.statics.live.spongecell.com%2Fdavis%2Fui%2Finstream%2Fbar%2Fv4t%2Fassets%2FVideo.flv&amp;platformPlacementId=50013870&amp;creativeId=278638&amp;widgetId=278638&amp;flightId=12268&amp;hostBaseUrl=spongecell.com&amp;staticsBaseUrl=http%3A%2F%2Fcdn.statics.live.spongecell.com%2Fdavis%2Fui%2Finstream%2Fbar%2Fv4t&amp;externalPlacementId=SPONGECELL_PLACEMENT_ID&amp;campaignId=5756&amp;clickTag=http%3A%2F%2Fwww.spongecell.com&amp;clickTag1=http%3A%2F%2Fgallery.spongecell.com%2Finstream&amp;clickTag2=http%3A%2F%2Fwww.facebook.com%2FSpongecell&amp;HeatMap[track]=true&amp;anticache=SPONGECELL_CACHE_BUSTER        init();      }    }    protected function handleSignalProcessorNoData(event:SignalProcessorEvent) : void {      signalLoadedCount += 1;      if (signalCount == signalLoadedCount) init();    }        protected function setSignalLoaderData(event:SignalProcessorEvent):void {      signalLoadedCount++;      dynamicData.signalProcessors[event.data.id] = event.data;      Console.log("InStreamAd#setSignalLoaderData: dynamicData.signalProcessors[" + event.data.id + "]: " + dynamicData.signalProcessors[event.data.id]);      if (signalCount == signalLoadedCount) {        init();      } else {        Console.log("InStreamAd#setSignalLoaderData: signalCount: " + signalCount + " < signalLoadedCount: " + signalLoadedCount + ". Still waiting for additional SignalLoaders to complete.")      }    }        // Some players require us to initial return the VPAID object (InStreamAd) via getVPAID() to start the process:    // Called from VAST Player    public function getVPAID() : * {       return this;     }          // Called from VAST Player    public function handshakeVersion(playerVPAIDVersion : String) : String {       Console.log("VPAID#handshakeVersion");      return VPAID_VERSION;     }      // Called from VAST Player    public function initAd(width : Number, height : Number, viewMode : String, desiredBitrate : Number, creativeData : String, environmentVars : String) : void {      Console.log('VPAID#initAd: width: ' + width + ', height: ' + height + ', viewMode: ' + viewMode + ', desiredBitrate: ' + desiredBitrate);      Console.log('VPAID#initAd: creativeData: ' + creativeData + ', environmentVars: ' + environmentVars);      resizeAd(width, height, viewMode);      // Force loading strategies to `LoadingStrategy.INITIAL` for all InStream ads.            loader.actionsLoadingStrategy = loader.creativeLoadingStrategy = loader.menuLoadingStrategy = LoadingStrategy.INITIAL;      getDynamicData();    }        // Called from VAST Player    public function resizeAd(width : Number, height : Number, viewMode : String) : void {      Console.log('VPAID#resizeAd: width: ' + width + ', height: ' + height + ', viewMode: ' + viewMode);      _vastPlayerWidth = width;      _vastPlayerHeight = height;      resizeableObjects.forEach(function(object) { object.resize(width, height); });      resizeStageObjects(width, height);    }    private function resizeStageObjects(width:Number, height:Number) : void {      spinnerPanel.background.width = underlay.width = width;      spinnerPanel.background.height = underlay.height = height;      spinnerPanel.petals.x = width / 2;      spinnerPanel.petals.y = height / 2;    }          private function handleInStreamVideoLoaded(event:InStreamAdEvent) : void {      event.stopPropagation();      removeEventListener(InStreamAdEvent.VIDEO_LOADED, handleInStreamVideoLoaded);      removeEventListener(AdEvent.END, stopAd);      _inStreamVideo = event.target;      _inStreamVideo.adVolume(_adVolume);      _inStreamVideo.resize(_vastPlayerWidth, _vastPlayerHeight);      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdImpression));      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdLoaded));      this.visible = true;    }    private function handleInStreamExtend(event:InStreamAdEvent) : void {      _inStreamVideo.extendVideo();      var skipAdTime = _adTimeRemaining;      var timer:Timer = new Timer(skipAdTime * 1000, 1);      timer.addEventListener(TimerEvent.TIMER, handleSkipAdTimer);      timer.start();            // re-listen for adRemainingTime in order to update VAST player with the new duration:      addEventListener(VideoPlayerEvent.TIME_REMAINING, updateAdRemainingTime);      function updateAdRemainingTime(event:VideoPlayerEvent) : void {        removeEventListener(VideoPlayerEvent.TIME_REMAINING, updateAdRemainingTime);        _adTimeRemaining = event.data.timeRemaining;        Console.log('VPAIDEvent.AdRemainingTimeChange, _adTimeRemaining: ' + _adTimeRemaining);        dispatchEvent(new VPAIDEvent(VPAIDEvent.AdRemainingTimeChange));      }    }    private function handleInStreamSkip(event:InStreamAdEvent):void {      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdUserClose));    }    private function handleSkipAdTimer(event:TimerEvent):void {        event.target.stop();        trace('Show the Skip Ad');        event.target.removeEventListener(TimerEvent.TIMER, handleSkipAdTimer);    }        private function handleAdRemainingTime(event:VideoPlayerEvent) : void {      if (event.data.timeRemaining > _adTimeRemaining) {        _adTimeRemaining = event.data.timeRemaining;        removeEventListener(VideoPlayerEvent.TIME_REMAINING, handleAdRemainingTime);        Console.log('VPAIDEvent.AdRemainingTimeChange, _adTimeRemaining: ' + _adTimeRemaining);        _initialAdTotalTime = _adTimeRemaining;        dispatchEvent(new VPAIDEvent(VPAIDEvent.AdRemainingTimeChange));      }    }        private function handleTimeRemaining(event:VideoPlayerEvent) : void {       _adTimeRemaining = event.data.timeRemaining;    }        // Called from VAST Player    public function startAd() : void {      Console.log('VPAID#startAd');      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdStarted));      playInStreamAd();    }        // Called from VAST Player    public function stopAd(event:Event=null) : void {      Console.log('VPAID#stopAd');      removeEventListener(ActionEventType.CLOSE, handleSpongecellScreenClose);      _inStreamVideo.pauseVideo();      dispatchEvent(new ActionEvent(ActionEventType.CLOSE, null));      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdStopped));    }        // Called from VAST Player    public function pauseAd(event:Event=null) : void {      Console.log('VPAID#pauseAd');      _inStreamVideo.pauseVideo();      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdPaused));    }        private function pauseVideo(event:AdEvent) : void {      event.stopPropagation();      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdPaused));    }        private function playInStreamAd() : void {      _inStreamVideo.playVideo();      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdVideoStart));    }        // Called from VAST Player    public function resumeAd(event:Event=null) : void {      Console.log('VPAID#resumeAd');      _inStreamVideo.playVideo();      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdPlaying));    }        private function resumeVideo(event:AdEvent) : void {            dispatchEvent(new VPAIDEvent(VPAIDEvent.AdPlaying));    }        // Called from VAST Player      public function expandAd() : void { /* EMPTY */ }        // Called from VAST Player    public function collapseAd() : void { /* EMPTY */ }             private function getDurationValue(creativeData:String):void {      var startIndex:Number = creativeData.indexOf("duration=");      var endIndex:Number = creativeData.indexOf(";");    }    private function handleSpongecellScreenOpen(event:ActionEvent=null) : void {      trace('InStream#handleSpongecellScreenOpen')      _inStreamVideo.pauseVideo();      loader.dispatchEvent(new Event(ActionEventType.OPEN));      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdPaused));      toggleUnderlay({ type : 'show' });    }    private function handleSpongecellScreenClose(event:ActionEvent=null) : void {      trace('InStream#handleSpongecellScreenClose')      _inStreamVideo.playVideo();      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdPlaying));      toggleUnderlay({ type : 'hide' });    }    private function handleSpongecellScreenClick(event:ActionEvent=null) : void {      dispatchEvent(new VPAIDEvent(VPAIDEvent.AdClickThru, { 'playerHandles' : false }));    }    private function handleSpongecellVideoReporting(event:ActionEvent=null) : void {      switch(event.description) {        case "Viewed 25%":          dispatchEvent(new VPAIDEvent(VPAIDEvent.AdVideoFirstQuartile));          break;        case "Viewed 50%":          dispatchEvent(new VPAIDEvent(VPAIDEvent.AdVideoMidpoint));          break;        case "Viewed 75%":          dispatchEvent(new VPAIDEvent(VPAIDEvent.AdVideoThirdQuartile));          break;        case "Viewed 100%":          dispatchEvent(new VPAIDEvent(VPAIDEvent.AdVideoComplete));          stopAd();          break;      }            if (InStreamDataExchange.inStreamMenu) { InStreamDataExchange.inStreamMenu.handleQuartile(event.description) };    }    private function toggleUnderlay(options:Object) : void {      var onComplete;      var alpha;      if (options.type == 'show') {        alpha = _underlayAlpha;        underlay.visible = true;      } else {        alpha = 0;        onComplete = function() { underlay.visible = false; }      }      TweenNano.to(underlay, UNDERLAY_FADE_SPEED, { alpha : alpha, onComplete : onComplete })    }  }};